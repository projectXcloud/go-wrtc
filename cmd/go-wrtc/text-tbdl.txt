					stdoutPipe, err := cmd.StdoutPipe()
					if err != nil {
						log.Printf("error creating FFmpeg stdout pipe: %v", err)
					}

					if err := cmd.Start(); err != nil {
						log.Printf("error starting FFmpeg process: %v", err)
					}
					// Use a buffer to read the data in chunks
					buf := make([]byte, 4096) // Adjust the size as needed
					// buf2 := make([]byte, 1024) // Adjust the size as needed
					for {
						n, err := stdoutPipe.Read(buf)
						if err != nil {
							if err == io.EOF {
								break // End of file is expected for some commands
							}
							log.Printf("Error reading from stdout pipe: %v\n", err)
							break
						}
						dur := time.Duration(n*8/128) * time.Millisecond
						audioTrack.WriteSample(media.Sample{
							Data:            buf[:n],
							Duration:        dur,
							Timestamp:       time.Now(),
							PacketTimestamp: uint32(time.Now().Unix()),
						})
					}